// This code was autogenerated from helloworld.proto, do not edit.
package api

import (
	"context"
	"errors"
	"time"

	"github.com/jmz331/nrpc"
	"github.com/nats-io/nats.go"
	"google.golang.org/protobuf/proto"
)

// GreeterServiceServer is the interface that providers of the service
// GreeterService should implement.
type GreeterServiceServer interface {
	SayHello(ctx context.Context, req *HelloRequest) (resp *HelloReply, err error)
}

// GreeterServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given GreeterServiceServer implementation.
type GreeterServiceHandler struct {
	ctx    context.Context
	nc     nrpc.NatsConn
	server GreeterServiceServer
	sub    *nats.Subscription
}

func NewGreeterServiceHandler(ctx context.Context, nc nrpc.NatsConn, s GreeterServiceServer) *GreeterServiceHandler {
	return &GreeterServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *GreeterServiceHandler) Subject() string {
	return "examples.api.GreeterService.>"
}

func (h *GreeterServiceHandler) Subscribe() error {
	sub, err := h.nc.Subscribe(h.Subject(), h.Handler)
	if err != nil {
		return err
	}
	h.sub = sub
	return nil
}

func (h *GreeterServiceHandler) Unsubscribe() error {
	return h.sub.Unsubscribe()
}
func (h *GreeterServiceHandler) Handler(msg *nats.Msg) {
	var ctx = h.ctx
	//subject: pkg.service.method

	request := new(nrpc.NRPCRequest)
	var err error
	if err := proto.Unmarshal(msg.Data, request); err != nil {
		//todo 处理异常情况日志输出
		return
	}

	var res proto.Message
	switch request.MethodName {
	case "SayHello":
		req := new(HelloRequest)
		if err = proto.Unmarshal(request.Data, req); err != nil {
			//todo 处理异常情况日志输出
			break
		}
		if res, err = h.server.SayHello(ctx, req); err != nil {
			//todo 处理异常情况日志输出
			break
		}
	default:
		//todo 处理异常情况日志输出
		err = errors.New("unknown name: " + request.MethodName)
	}
	var data []byte
	if err != nil {
		//todo 处理错误，转换成gRPC错误类型
		data, err = proto.Marshal(&nrpc.Error{
			Type:    nrpc.Error_SERVER,
			Message: err.Error(),
		})
		if err != nil {
			//todo 处理异常情况日志输出
			return
		}
	} else {
		if data, err = proto.Marshal(res); err != nil {
			//todo 处理异常情况
			return
		}
	}

	if err = h.nc.Publish(msg.Reply, data); err != nil {
		//todo 处理异常情况
		return
	}
}

type GreeterServiceClient struct {
	nc          nrpc.NatsConn
	PkgSubject  string
	ServiceName string
	Timeout     time.Duration
}

func NewGreeterServiceClient(nc nrpc.NatsConn) *GreeterServiceClient {
	return &GreeterServiceClient{
		nc:          nc,
		PkgSubject:  "examples.api",
		ServiceName: "GreeterService",
		Timeout:     5 * time.Second,
	}
}

func (c *GreeterServiceClient) SayHello(req *HelloRequest) (resp *HelloReply, err error) {
	// call
	resp = new(HelloReply)
	err = nrpc.Call(req, resp, c.nc, c.PkgSubject, c.ServiceName, "SayHello", c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
