// This code was autogenerated from helloworld.proto, do not edit.
package api

import (
	"context"
	"log"
	"time"

	"github.com/jmz331/nrpc"
	"github.com/nats-io/nats.go"
	"google.golang.org/protobuf/proto"
)

// GreeterServiceServer is the interface that providers of the service
// GreeterService should implement.
type GreeterServiceServer interface {
	SayHello(ctx context.Context, req *HelloRequest) (resp *HelloReply, err error)
}

// GreeterServiceHandler provides a NATS subscription handler that can serve a
// subscription using a given GreeterServiceServer implementation.
type GreeterServiceHandler struct {
	ctx    context.Context
	nc     nrpc.NatsConn
	server GreeterServiceServer
	sub    *nats.Subscription
}

func NewGreeterServiceHandler(ctx context.Context, nc nrpc.NatsConn, s GreeterServiceServer) *GreeterServiceHandler {
	return &GreeterServiceHandler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *GreeterServiceHandler) Subject() string {
	return "examples.api.GreeterService.>"
}

func (h *GreeterServiceHandler) Subscribe() error {
	sub, err := h.nc.Subscribe(h.Subject(), h.Handler)
	if err != nil {
		return err
	}
	h.sub = sub
	return nil
}

func (h *GreeterServiceHandler) Unsubscribe() error {
	return h.sub.Unsubscribe()
}

func (h *GreeterServiceHandler) Handler(msg *nats.Msg) {
	var ctx = h.ctx
	//subject: pkg.service.method

	req := new(nrpc.NRPCRequest)
	err := proto.Unmarshal(msg.Data, req)
	if err != nil {
		//todo 处理异常情况
		return
	}

	request := nrpc.NewRequest(ctx, h.nc, msg.Subject, msg.Reply)
	// extract method name & encoding from subject
	_, _, name, tail, err := nrpc.ParseSubject(
		"examples.api", 0, "GreeterService", 0, msg.Subject)
	if err != nil {
		log.Printf("GreeterServiceHanlder: GreeterService subject parsing failed: %v", err)
		return
	}

	request.MethodName = name
	request.SubjectTail = tail

	// call handler and form response
	var immediateError *nrpc.Error
	switch name {
	case "SayHello":
		_, request.Encoding, err = nrpc.ParseSubjectTail(0, request.SubjectTail)
		if err != nil {
			log.Printf("SayHelloHanlder: SayHello subject parsing failed: %v", err)
			break
		}
		var req HelloRequest
		if err := nrpc.Unmarshal(request.Encoding, msg.Data, &req); err != nil {
			log.Printf("SayHelloHandler: SayHello request unmarshal failed: %v", err)
			immediateError = &nrpc.Error{
				Type:    nrpc.Error_CLIENT,
				Message: "bad request received: " + err.Error(),
			}
		} else {
			request.Handler = func(ctx context.Context) (proto.Message, error) {
				innerResp, err := h.server.SayHello(ctx, req)
				if err != nil {
					return nil, err
				}
				return &innerResp, err
			}
		}
	default:
		log.Printf("GreeterServiceHandler: unknown name %q", name)
		immediateError = &nrpc.Error{
			Type:    nrpc.Error_CLIENT,
			Message: "unknown name: " + name,
		}
	}
	if immediateError == nil {
		if h.workers != nil {
			// Try queuing the request
			if err := h.workers.QueueRequest(request); err != nil {
				log.Printf("nrpc: Error queuing the request: %s", err)
			}
		} else {
			// Run the handler synchronously
			request.RunAndReply()
		}
	}

	if immediateError != nil {
		if err := request.SendReply(nil, immediateError); err != nil {
			log.Printf("GreeterServiceHandler: GreeterService handler failed to publish the response: %s", err)
		}
	} else {
	}
}

type GreeterServiceClient struct {
	nc         nrpc.NatsConn
	PkgSubject string
	Subject    string
	Encoding   string
	Timeout    time.Duration
}

func NewGreeterServiceClient(nc nrpc.NatsConn) *GreeterServiceClient {
	return &GreeterServiceClient{
		nc:         nc,
		PkgSubject: "examples.api",
		Subject:    "GreeterService",
		Encoding:   "protobuf",
		Timeout:    5 * time.Second,
	}
}

func (c *GreeterServiceClient) SayHello(req HelloRequest) (resp HelloReply, err error) {

	subject := c.PkgSubject + "." + c.Subject + "." + "SayHello"

	// call
	err = nrpc.Call(&req, &resp, c.nc, subject, c.Encoding, c.Timeout)
	if err != nil {
		return // already logged
	}

	return
}

type Client struct {
	nc              nrpc.NatsConn
	defaultEncoding string
	defaultTimeout  time.Duration
	pkgSubject      string
	GreeterService  *GreeterServiceClient
}

func NewClient(nc nrpc.NatsConn) *Client {
	c := Client{
		nc:              nc,
		defaultEncoding: "protobuf",
		defaultTimeout:  5 * time.Second,
		pkgSubject:      "examples.api",
	}
	c.GreeterService = NewGreeterServiceClient(nc)
	return &c
}

func (c *Client) SetEncoding(encoding string) {
	c.defaultEncoding = encoding
	if c.GreeterService != nil {
		c.GreeterService.Encoding = encoding
	}
}

func (c *Client) SetTimeout(t time.Duration) {
	c.defaultTimeout = t
	if c.GreeterService != nil {
		c.GreeterService.Timeout = t
	}
}
