package main

const tFile = `// This code was autogenerated from {{.GetName}}, do not edit.

{{- $pkgName := GoPackageName .}}
{{- $pkgSubject := GetPkgSubject .}}
{{- $pkgSubjectPrefix := GetPkgSubjectPrefix .}}
{{- $pkgSubjectParams := GetPkgSubjectParams .}}
package {{$pkgName}}

import (
	"context"
	"log"
	"time"

	"github.com/jmz331/nrpc"
	"github.com/nats-io/nats.go"
	"google.golang.org/protobuf/proto"
)

{{- range .Service}}

// {{.GetName}}Server is the interface that providers of the service
// {{.GetName}} should implement.
type {{.GetName}}Server interface {
	{{- range .Method}}
	{{- if ne .GetInputType ".nrpc.NoRequest"}}
	{{- $resultType := GetResultType .}}
	{{.GetName}}(ctx context.Context
		{{- range GetMethodSubjectParams . -}}
		, {{ . }} string
		{{- end -}}
		{{- if ne .GetInputType ".nrpc.Void" -}}
		, req *{{GoType .GetInputType}}
		{{- end -}}
		{{- if HasStreamedReply . -}}
		, pushRep func({{GoType .GetOutputType}})
		{{- end -}}
	)
		{{- if ne $resultType ".nrpc.NoReply" }} (
		{{- if and (ne $resultType ".nrpc.Void") (not (HasStreamedReply .)) -}}
		resp *{{GoType $resultType}}, {{end -}}
		err error)
		{{- end -}}
	{{- end}}
	{{- end}}
}

// {{.GetName}}Handler provides a NATS subscription handler that can serve a
// subscription using a given {{.GetName}}Server implementation.
type {{.GetName}}Handler struct {
	ctx     context.Context
	nc      nrpc.NatsConn
	server  {{.GetName}}Server
	sub     *nats.Subscription
}

func New{{.GetName}}Handler(ctx context.Context, nc nrpc.NatsConn, s {{.GetName}}Server) *{{.GetName}}Handler {
	return &{{.GetName}}Handler{
		ctx:    ctx,
		nc:     nc,
		server: s,
	}
}

func (h *{{.GetName}}Handler) Subject() string {
	return "{{$pkgSubjectPrefix}}
	{{- range $pkgSubjectParams -}}
		*.
	{{- end -}}
	{{GetServiceSubject .}}
	{{- range GetServiceSubjectParams . -}}
		.*
	{{- end -}}
	.>"
}
{{- $serviceName := .GetName}}
{{- $serviceSubject := GetServiceSubject .}}
{{- $serviceSubjectParams := GetServiceSubjectParams .}}

func (h *{{$serviceName}}Handler) Subscribe() error {
	sub, err := h.nc.Subscribe(h.Subject(), h.Handler)
	if err != nil {
		return err
	}
	h.sub = sub
	return nil
}

func (h *{{$serviceName}}Handler) Unsubscribe() error {
	return h.sub.Unsubscribe()
}

{{- if ServiceNeedsHandler .}}
func (h *{{.GetName}}Handler) Handler(msg *nats.Msg) {
    var ctx = h.ctx
	//subject: pkg.service.method

	request := new(nrpc.NRPCRequest)
	var err error
	if err := proto.Unmarshal(msg.Data, request); err != nil {
		//todo 处理异常情况日志输出
		return
	}

	var res proto.Message
	switch request.MethodName {
    {{- range .Method}}
	case "{{GetMethodSubject .}}":
		req := new({{GoType .GetInputType}})
		if err = proto.Unmarshal(request.Data, req); err != nil {
			//todo 处理异常情况日志输出
			break
		}
		if res, err = h.server.{{.GetName}}(ctx, req); err != nil {
			//todo 处理异常情况日志输出
			break
		}
{{- end}}{{/* range .Method */}}
	default:
		//todo 处理异常情况日志输出
		err = errors.New("unknown name: " + request.MethodName)
	}
	var data []byte
	if err != nil {
		//todo 处理错误，转换成gRPC错误类型
		data, err = proto.Marshal(&nrpc.Error{
			Type:    nrpc.Error_SERVER,
			Message: err.Error(),
		})
		if err != nil {
			//todo 处理异常情况日志输出
			return
		}
	} else {
		if data, err = proto.Marshal(res); err != nil {
			//todo 处理异常情况
			return
		}
	}

	if err = h.nc.Publish(msg.Reply, data); err != nil {
		//todo 处理异常情况
		return
	}
}
{{- end}}

type {{.GetName}}Client struct {
	nc          nrpc.NatsConn
	PkgSubject  string
	ServiceName string
	Timeout     time.Duration
}

func New{{.GetName}}Client(nc nrpc.NatsConn
	{{- range $pkgSubjectParams -}}
	, pkgParam{{.}} string
	{{- end -}}
	{{- range GetServiceSubjectParams . -}}
	, svcParam{{ . }} string
	{{- end -}}
	) *{{.GetName}}Client {
	return &{{.GetName}}Client{
		nc:      nc,
		{{- if ne 0 (len $pkgSubject)}}
		PkgSubject: "{{$pkgSubject}}",
		{{- end}}
		{{- range $pkgSubjectParams}}
		PkgParam{{.}}: pkgParam{{.}},
		{{- end}}
		ServiceName: "{{GetServiceSubject .}}",
		{{- range GetServiceSubjectParams .}}
		SvcParam{{.}}: svcParam{{.}},
		{{- end}}
		Timeout: 5 * time.Second,
	}
}
{{- range .Method}}
{{- $resultType := GetResultType .}}

func (c *{{$serviceName}}Client) {{.GetName}}(req *{{GoType .GetInputType}}) (resp *{{GoType $resultType}}, err error) {
	// call
	resp = new({{GoType $resultType}})
	err = nrpc.Call(req, resp, c.nc, c.PkgSubject, c.ServiceName, "{{.GetName}}", c.Timeout)
	if err != nil {
		return // already logged
	}
	return
}
{{- end}}
{{- end}}`
